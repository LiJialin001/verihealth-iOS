// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CoreSDK
import BaseFramework
import CocoaMQTT
@_exported import CoreSDK
import Foundation
import HttpFramework
import Swift
import _Concurrency
@objc @_inheritsConvenienceInitializers public class MqttClient : ObjectiveC.NSObject {
  public static func sharedInstance() -> CoreSDK.MqttClient
  public func mqttSetting(clientID: Swift.String? = nil, host: Swift.String, port: Swift.UInt16, username: Swift.String, password: Swift.String)
  public func mqtt5Setting(clientID: Swift.String? = nil, host: Swift.String, port: Swift.UInt16, username: Swift.String, password: Swift.String, willTopic: Swift.String, willString: Swift.String, willContentType: Swift.String)
  public func connectToServer(mqttVersion: Swift.String? = nil)
  public func subscribeTopic(mqttVersion: Swift.String? = nil, subTopic: Swift.String, qos: CocoaMQTTQoS? = nil)
  public func publishMessage(mqttVersion: Swift.String? = nil, topic: Swift.String, message: Swift.String?, publishContentType: Swift.String, qos: CocoaMQTTQoS? = nil)
  public func disconnect(mqttVersion: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension CoreSDK.MqttClient : CocoaMQTTDelegate {
  @objc dynamic public func mqtt(_ mqtt: CocoaMQTT, didStateChangeTo state: CocoaMQTTConnState)
  @objc dynamic public func mqtt(_ mqtt: CocoaMQTT, didConnectAck ack: CocoaMQTTConnAck)
  @objc dynamic public func mqttDidPing(_ mqtt: CocoaMQTT)
  @objc dynamic public func mqttDidReceivePong(_ mqtt: CocoaMQTT)
  @objc dynamic public func mqttDidDisconnect(_ mqtt: CocoaMQTT, withError err: Swift.Error?)
  @objc dynamic public func mqtt(_ mqtt: CocoaMQTT, didSubscribeTopics success: Foundation.NSDictionary, failed: [Swift.String])
  @objc dynamic public func mqtt(_ mqtt: CocoaMQTT, didUnsubscribeTopics topics: [Swift.String])
  @objc dynamic public func mqtt(_ mqtt: CocoaMQTT, didPublishMessage message: CocoaMQTTMessage, id: Swift.UInt16)
  @objc dynamic public func mqtt(_ mqtt: CocoaMQTT, didPublishAck id: Swift.UInt16)
  @objc dynamic public func mqtt(_ mqtt: CocoaMQTT, didReceiveMessage message: CocoaMQTTMessage, id: Swift.UInt16)
}
extension CoreSDK.MqttClient : CocoaMQTT5Delegate {
  @objc dynamic public func mqtt5(_ mqtt5: CocoaMQTT5, didStateChangeTo state: CocoaMQTTConnState)
  @objc dynamic public func mqtt5(_ mqtt5: CocoaMQTT5, didConnectAck ack: CocoaMQTTCONNACKReasonCode, connAckData: MqttDecodeConnAck)
  @objc dynamic public func mqtt5DidPing(_ mqtt5: CocoaMQTT5)
  @objc dynamic public func mqtt5DidReceivePong(_ mqtt5: CocoaMQTT5)
  @objc dynamic public func mqtt5DidDisconnect(_ mqtt5: CocoaMQTT5, withError err: Swift.Error?)
  @objc dynamic public func mqtt5(_ mqtt5: CocoaMQTT5, didSubscribeTopics success: Foundation.NSDictionary, failed: [Swift.String], subAckData: MqttDecodeSubAck)
  @objc dynamic public func mqtt5(_ mqtt5: CocoaMQTT5, didUnsubscribeTopics topics: [Swift.String], UnsubAckData: MqttDecodeUnsubAck)
  @objc dynamic public func mqtt5(_ mqtt5: CocoaMQTT5, didPublishMessage message: CocoaMQTT5Message, id: Swift.UInt16)
  @objc dynamic public func mqtt5(_ mqtt5: CocoaMQTT5, didPublishAck id: Swift.UInt16, pubAckData: MqttDecodePubAck)
  @objc dynamic public func mqtt5(_ mqtt5: CocoaMQTT5, didPublishRec id: Swift.UInt16, pubRecData: MqttDecodePubRec)
  @objc dynamic public func mqtt5(_ mqtt5: CocoaMQTT5, didPublishComplete id: Swift.UInt16, pubCompData: MqttDecodePubComp)
  @objc dynamic public func mqtt5(_ mqtt5: CocoaMQTT5, didReceiveMessage message: CocoaMQTT5Message, id: Swift.UInt16, publishData: MqttDecodePublish)
  @objc dynamic public func mqtt5(_ mqtt5: CocoaMQTT5, didReceiveDisconnectReasonCode reasonCode: CocoaMQTTDISCONNECTReasonCode)
  @objc dynamic public func mqtt5(_ mqtt5: CocoaMQTT5, didReceiveAuthReasonCode reasonCode: CocoaMQTTAUTHReasonCode)
}
public let ResultKeysType: [Foundation.NSString?]
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CloudDataManager : ObjectiveC.NSObject {
  @objc public static func sharedInstance() -> CoreSDK.CloudDataManager
  @objc deinit
  public func cloudSetting(clientID: Swift.String? = nil, host: Swift.String, port: Swift.UInt16, username: Swift.String, password: Swift.String, willTopic: Swift.String, willString: Swift.String, willContentType: Swift.String)
  public func connectCloudSever()
  public func getCloudInfo(subTopic: Swift.String, comTopic: Swift.String, publishContentType: Swift.String)
}
extension CoreSDK.CloudDataManager : CoreSDK.DataParserDelegate {
  @objc dynamic public func dataParserResult(_ type: BaseFramework.SenResultDataType, valueDic: Foundation.NSMutableDictionary!)
}
